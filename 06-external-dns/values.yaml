image:
  registry: docker.io
  repository: bitnami/external-dns
  tag: 0.5.17-debian-9-r0

## K8s resources type to be observed for new DNS entries by ExternalDNS
##
sources:
- service
- ingress

## DNS provider where the DNS records will be created. Available providers are - aws, azure, cloudflare, designate, digitalocoean, google, infoblox, rfc2136
##
provider: designate

## Limit possible target zones by domain suffixes (optional)
##
domainFilters: ["metakube.io"]
## Adjust the interval for DNS updates
interval: "1m"
## Modify how DNS records are sychronized between sources and providers (options: sync, upsert-only)
policy: sync
## Registry Type. Available types are: txt, noop
registry: "txt"
## TXT Registry Identifier
txtOwnerId: "CHANGEME"
## Prefix to create a TXT record with a name following the pattern prefix.<CNAME record>
# txtPrefix: ""

## Extra Arguments to passed to external-dns
##
extraArgs: {}
## Extra env. variable to set on external-dns container
##

extraEnv:
  - name: OS_AUTH_URL
    value: https://api.cloud.syseleven.net:5000/v3
  - name: OS_REGION_NAME
    value: CHANGEME
  - name: OS_USERNAME
    value: CHANGEME
  - name: OS_PASSWORD
    value: CHANGEME
  - name: OS_PROJECT_NAME
    value: CHANGEME
  - name: OS_USER_DOMAIN_NAME
    value: Default

## Replica count
##
replicas: 1

## RBAC parameteres
## https://kubernetes.io/docs/reference/access-authn-authz/rbac/
##
rbac:
  create: true

##
securityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  capabilities:
    drop: ["ALL"]
podSecurityContext:
  fsGroup: 1001
  runAsUser: 1001
  runAsNonRoot: true

## Configure resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
##
resources:
 limits:
   cpu: 50m
   memory: 50Mi
 requests:
   memory: 50Mi
   cpu: 10m

## Liveness Probe. The block is directly forwarded into the deployment, so you can use whatever livenessProbe configuration you want.
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
##
livenessProbe:
  httpGet:
    path: /healthz
    port: http
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 2
  successThreshold: 1

## Readiness Probe. The block is directly forwarded into the deployment, so you can use whatever readinessProbe configuration you want.
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
##
readinessProbe:
  httpGet:
    path: /healthz
    port: http
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1
