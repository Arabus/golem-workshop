---
- name: Copy kubeadm-config to master nodes
  template:
    src: "kubeadm-config.yaml.j2"
    dest: "/etc/kubernetes/kubeadm-config.yaml"
    owner: root
    group: root
    mode: 0644
  when: cloud_provider is defined

- name: Initialize kubernetes cluster with kubeadm cloud config and flannel
  command: "/usr/bin/kubeadm init --config=/etc/kubernetes/kubeadm-config.yaml --ignore-preflight-errors=all"
  args:
    creates: /etc/kubernetes/pki
  register: master_init
  ignore_errors: true
  when: cloud_provider is defined and network_plugin == "flannel"

- name:  Initialize kubernetes cluster with flannel output
  debug:
    var: master_init.stdout_lines
  when: network_plugin == "flannel"

- name: Initialize kubernetes cluster with flannel
  command: "/usr/bin/kubeadm init --pod-network-cidr={{ pod_network_cidr }} --apiserver-cert-extra-sans={{ hostvars[inventory_hostname].ansible_host }}  --ignore-preflight-errors=all"
  args:
    creates: /etc/kubernetes/pki
  register: master_init
  ignore_errors: true
  when:  cloud_provider is not defined and network_plugin == "flannel"

- name:  Initialize kubernetes cluster with flannel output
  debug:
    var: master_init.stdout_lines
  when: network_plugin == "flannel"

- name: Initialize kubernetes cluster with alternative cni plugin and cloud config
  command: "/usr/bin/kubeadm init --config=/etc/kubernetes/kubeadm-config.yaml --ignore-preflight-errors=all"
  args:
    creates: /etc/kubernetes/pki
  register: master_init
  ignore_errors: true
  when: cloud_provider is defined and network_plugin !="flannel"

- name:  Initialize kubernetes cluster output
  debug:
    var: master_init.stdout_lines
  when: network_plugin !="flannel"

- name: Initialize kubernetes cluster with alternative cni plugin
  command: "/usr/bin/kubeadm init --apiserver-cert-extra-sans={{ hostvars[inventory_hostname].ansible_ssh_host }} --ignore-preflight-errors=all"
  args:
    creates: /etc/kubernetes/pki
  register: master_init
  ignore_errors: true
  when: cloud_provider is not defined and network_plugin !="flannel"

- name:  Initialize kubernetes cluster output
  debug:
    var: master_init.stdout_lines
  when: network_plugin !="flannel"

- name: Create rbac role for network
  command: /usr/bin/kubectl apply -f {{ rbac_addon_url }}
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  register: rbac_network_role
  ignore_errors: true
  when: network_plugin != "flannel"

- debug:
    var: rbac_network_role.stdout_lines

- name: Create pod network
  command: /usr/bin/kubectl apply -f {{ network_addon_url }}
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  register: pod_network
  ignore_errors: true

- debug:
    var: pod_network.stdout_lines

- name: Copy /etc/kubernetes/admin.conf on master to local file kubeadm/admin.conf
  fetch:
    src: /etc/kubernetes/admin.conf
    dest: kubeadm/admin.conf
    flat: true

- name: Replace internal ip in kubconfig with external ip
  become: no
  replace:
    path: kubeadm/admin.conf
    regexp: '(25[0-5]|2[0-4][0-9]|[1][0-9][0-9]|[1-9][0-9]|[0-9]?)(\.(25[0-5]|2[0-4][0-9]|[1][0-9][0-9]|[1-9][0-9]|[0-9]?)){3}'
    replace: "{{ hostvars[groups['master'][0]].ansible_host }}"
  delegate_to: localhost
  when: load_balancer_addr is not defined

- name: Replace internal ip in kubconfig with load balancer address
  become: no
  replace:
    path: kubeadm/admin.conf
    regexp: '(25[0-5]|2[0-4][0-9]|[1][0-9][0-9]|[1-9][0-9]|[0-9]?)(\.(25[0-5]|2[0-4][0-9]|[1][0-9][0-9]|[1-9][0-9]|[0-9]?)){3}'
    replace: "{{ load_balancer_addr }}"
  delegate_to: localhost
  when: load_balancer_addr is defined

- name: Copy /etc/kubernetes/admin.conf on master to users home
  copy:
    remote_src: True
    src: /etc/kubernetes/admin.conf
    dest: /home/{{ansible_user}}/admin.conf
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"

- name: add kubeconfig export to bashrc
  lineinfile:
    dest: /home/{{ansible_user}}/.bashrc
    line: 'export KUBECONFIG=$HOME/admin.conf'
    state: present

- name: Wait until coredns pods are running
  shell: "kubectl --kubeconfig /etc/kubernetes/admin.conf get pods --all-namespaces | grep coredns"
  register: result
  until: result.stdout.find("Running") != -1
  retries: 30
  delay: 10
